"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _propTypes2 = require("../prop-types");

var _githubTabView = _interopRequireDefault(require("../views/github-tab-view"));

var _reporterProxy = require("../reporter-proxy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class GitHubTabController extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handlePushBranch", (currentBranch, targetRemote) => {
      return this.props.repository.push(currentBranch.getName(), {
        remote: targetRemote,
        setUpstream: true
      });
    });

    _defineProperty(this, "handleRemoteSelect", (e, remote) => {
      e.preventDefault();
      return this.props.repository.setConfig('atomGithub.currentRemote', remote.getName());
    });

    _defineProperty(this, "openBoundPublishDialog", () => this.props.openPublishDialog(this.props.repository));

    _defineProperty(this, "handleLogin", token => {
      (0, _reporterProxy.incrementCounter)('github-login');
      this.props.loginModel.setToken(this.currentEndpoint().getLoginAccount(), token);
    });

    _defineProperty(this, "handleLogout", () => {
      (0, _reporterProxy.incrementCounter)('github-logout');
      this.props.loginModel.removeToken(this.currentEndpoint().getLoginAccount());
    });

    _defineProperty(this, "handleTokenRetry", () => this.props.loginModel.didUpdate());
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_githubTabView.default // Connection
    , {
      endpoint: this.currentEndpoint(),
      token: this.props.token,
      workspace: this.props.workspace,
      refresher: this.props.refresher,
      rootHolder: this.props.rootHolder,
      workingDirectory: this.props.workingDirectory || this.props.currentWorkDir,
      contextLocked: this.props.contextLocked,
      repository: this.props.repository,
      branches: this.props.branches,
      currentBranch: this.props.currentBranch,
      remotes: this.props.githubRemotes,
      currentRemote: this.props.currentRemote,
      manyRemotesAvailable: this.props.manyRemotesAvailable,
      aheadCount: this.props.aheadCount,
      pushInProgress: this.props.pushInProgress,
      isLoading: this.props.isLoading,
      handleLogin: this.handleLogin,
      handleLogout: this.handleLogout,
      handleTokenRetry: this.handleTokenRetry,
      handlePushBranch: this.handlePushBranch,
      handleRemoteSelect: this.handleRemoteSelect,
      changeWorkingDirectory: this.props.changeWorkingDirectory,
      setContextLock: this.props.setContextLock,
      getCurrentWorkDirs: this.props.getCurrentWorkDirs,
      onDidChangeWorkDirs: this.props.onDidChangeWorkDirs,
      openCreateDialog: this.props.openCreateDialog,
      openBoundPublishDialog: this.openBoundPublishDialog,
      openCloneDialog: this.props.openCloneDialog,
      openGitTab: this.props.openGitTab
    });
  }

  currentEndpoint() {
    return this.props.currentRemote.getEndpointOrDotcom();
  }

}

exports.default = GitHubTabController;

_defineProperty(GitHubTabController, "propTypes", {
  workspace: _propTypes.default.object.isRequired,
  refresher: _propTypes2.RefresherPropType.isRequired,
  loginModel: _propTypes2.GithubLoginModelPropType.isRequired,
  token: _propTypes2.TokenPropType,
  rootHolder: _propTypes2.RefHolderPropType.isRequired,
  workingDirectory: _propTypes.default.string,
  repository: _propTypes.default.object.isRequired,
  allRemotes: _propTypes2.RemoteSetPropType.isRequired,
  githubRemotes: _propTypes2.RemoteSetPropType.isRequired,
  currentRemote: _propTypes2.RemotePropType.isRequired,
  branches: _propTypes2.BranchSetPropType.isRequired,
  currentBranch: _propTypes2.BranchPropType.isRequired,
  aheadCount: _propTypes.default.number.isRequired,
  manyRemotesAvailable: _propTypes.default.bool.isRequired,
  pushInProgress: _propTypes.default.bool.isRequired,
  isLoading: _propTypes.default.bool.isRequired,
  currentWorkDir: _propTypes.default.string,
  changeWorkingDirectory: _propTypes.default.func.isRequired,
  setContextLock: _propTypes.default.func.isRequired,
  contextLocked: _propTypes.default.bool.isRequired,
  onDidChangeWorkDirs: _propTypes.default.func.isRequired,
  getCurrentWorkDirs: _propTypes.default.func.isRequired,
  openCreateDialog: _propTypes.default.func.isRequired,
  openPublishDialog: _propTypes.default.func.isRequired,
  openCloneDialog: _propTypes.default.func.isRequired,
  openGitTab: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb250cm9sbGVycy9naXRodWItdGFiLWNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiR2l0SHViVGFiQ29udHJvbGxlciIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY3VycmVudEJyYW5jaCIsInRhcmdldFJlbW90ZSIsInByb3BzIiwicmVwb3NpdG9yeSIsInB1c2giLCJnZXROYW1lIiwicmVtb3RlIiwic2V0VXBzdHJlYW0iLCJlIiwicHJldmVudERlZmF1bHQiLCJzZXRDb25maWciLCJvcGVuUHVibGlzaERpYWxvZyIsInRva2VuIiwibG9naW5Nb2RlbCIsInNldFRva2VuIiwiY3VycmVudEVuZHBvaW50IiwiZ2V0TG9naW5BY2NvdW50IiwicmVtb3ZlVG9rZW4iLCJkaWRVcGRhdGUiLCJyZW5kZXIiLCJ3b3Jrc3BhY2UiLCJyZWZyZXNoZXIiLCJyb290SG9sZGVyIiwid29ya2luZ0RpcmVjdG9yeSIsImN1cnJlbnRXb3JrRGlyIiwiY29udGV4dExvY2tlZCIsImJyYW5jaGVzIiwiZ2l0aHViUmVtb3RlcyIsImN1cnJlbnRSZW1vdGUiLCJtYW55UmVtb3Rlc0F2YWlsYWJsZSIsImFoZWFkQ291bnQiLCJwdXNoSW5Qcm9ncmVzcyIsImlzTG9hZGluZyIsImhhbmRsZUxvZ2luIiwiaGFuZGxlTG9nb3V0IiwiaGFuZGxlVG9rZW5SZXRyeSIsImhhbmRsZVB1c2hCcmFuY2giLCJoYW5kbGVSZW1vdGVTZWxlY3QiLCJjaGFuZ2VXb3JraW5nRGlyZWN0b3J5Iiwic2V0Q29udGV4dExvY2siLCJnZXRDdXJyZW50V29ya0RpcnMiLCJvbkRpZENoYW5nZVdvcmtEaXJzIiwib3BlbkNyZWF0ZURpYWxvZyIsIm9wZW5Cb3VuZFB1Ymxpc2hEaWFsb2ciLCJvcGVuQ2xvbmVEaWFsb2ciLCJvcGVuR2l0VGFiIiwiZ2V0RW5kcG9pbnRPckRvdGNvbSIsIlByb3BUeXBlcyIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJSZWZyZXNoZXJQcm9wVHlwZSIsIkdpdGh1YkxvZ2luTW9kZWxQcm9wVHlwZSIsIlRva2VuUHJvcFR5cGUiLCJSZWZIb2xkZXJQcm9wVHlwZSIsInN0cmluZyIsImFsbFJlbW90ZXMiLCJSZW1vdGVTZXRQcm9wVHlwZSIsIlJlbW90ZVByb3BUeXBlIiwiQnJhbmNoU2V0UHJvcFR5cGUiLCJCcmFuY2hQcm9wVHlwZSIsIm51bWJlciIsImJvb2wiLCJmdW5jIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBS0E7O0FBQ0E7Ozs7OztBQUVlLE1BQU1BLG1CQUFOLFNBQWtDQyxlQUFNQyxTQUF4QyxDQUFrRDtBQUFBO0FBQUE7O0FBQUEsOENBd0U1QyxDQUFDQyxhQUFELEVBQWdCQyxZQUFoQixLQUFpQztBQUNsRCxhQUFPLEtBQUtDLEtBQUwsQ0FBV0MsVUFBWCxDQUFzQkMsSUFBdEIsQ0FBMkJKLGFBQWEsQ0FBQ0ssT0FBZCxFQUEzQixFQUFvRDtBQUN6REMsUUFBQUEsTUFBTSxFQUFFTCxZQURpRDtBQUV6RE0sUUFBQUEsV0FBVyxFQUFFO0FBRjRDLE9BQXBELENBQVA7QUFJRCxLQTdFOEQ7O0FBQUEsZ0RBK0UxQyxDQUFDQyxDQUFELEVBQUlGLE1BQUosS0FBZTtBQUNsQ0UsTUFBQUEsQ0FBQyxDQUFDQyxjQUFGO0FBQ0EsYUFBTyxLQUFLUCxLQUFMLENBQVdDLFVBQVgsQ0FBc0JPLFNBQXRCLENBQWdDLDBCQUFoQyxFQUE0REosTUFBTSxDQUFDRCxPQUFQLEVBQTVELENBQVA7QUFDRCxLQWxGOEQ7O0FBQUEsb0RBb0Z0QyxNQUFNLEtBQUtILEtBQUwsQ0FBV1MsaUJBQVgsQ0FBNkIsS0FBS1QsS0FBTCxDQUFXQyxVQUF4QyxDQXBGZ0M7O0FBQUEseUNBc0ZqRFMsS0FBSyxJQUFJO0FBQ3JCLDJDQUFpQixjQUFqQjtBQUNBLFdBQUtWLEtBQUwsQ0FBV1csVUFBWCxDQUFzQkMsUUFBdEIsQ0FBK0IsS0FBS0MsZUFBTCxHQUF1QkMsZUFBdkIsRUFBL0IsRUFBeUVKLEtBQXpFO0FBQ0QsS0F6RjhEOztBQUFBLDBDQTJGaEQsTUFBTTtBQUNuQiwyQ0FBaUIsZUFBakI7QUFDQSxXQUFLVixLQUFMLENBQVdXLFVBQVgsQ0FBc0JJLFdBQXRCLENBQWtDLEtBQUtGLGVBQUwsR0FBdUJDLGVBQXZCLEVBQWxDO0FBQ0QsS0E5RjhEOztBQUFBLDhDQWdHNUMsTUFBTSxLQUFLZCxLQUFMLENBQVdXLFVBQVgsQ0FBc0JLLFNBQXRCLEVBaEdzQztBQUFBOztBQWdDL0RDLEVBQUFBLE1BQU0sR0FBRztBQUNQLHdCQUNFLDZCQUFDLHNCQUFELENBQ0U7QUFERjtBQUVFLE1BQUEsUUFBUSxFQUFFLEtBQUtKLGVBQUwsRUFGWjtBQUdFLE1BQUEsS0FBSyxFQUFFLEtBQUtiLEtBQUwsQ0FBV1UsS0FIcEI7QUFLRSxNQUFBLFNBQVMsRUFBRSxLQUFLVixLQUFMLENBQVdrQixTQUx4QjtBQU1FLE1BQUEsU0FBUyxFQUFFLEtBQUtsQixLQUFMLENBQVdtQixTQU54QjtBQU9FLE1BQUEsVUFBVSxFQUFFLEtBQUtuQixLQUFMLENBQVdvQixVQVB6QjtBQVNFLE1BQUEsZ0JBQWdCLEVBQUUsS0FBS3BCLEtBQUwsQ0FBV3FCLGdCQUFYLElBQStCLEtBQUtyQixLQUFMLENBQVdzQixjQVQ5RDtBQVVFLE1BQUEsYUFBYSxFQUFFLEtBQUt0QixLQUFMLENBQVd1QixhQVY1QjtBQVdFLE1BQUEsVUFBVSxFQUFFLEtBQUt2QixLQUFMLENBQVdDLFVBWHpCO0FBWUUsTUFBQSxRQUFRLEVBQUUsS0FBS0QsS0FBTCxDQUFXd0IsUUFadkI7QUFhRSxNQUFBLGFBQWEsRUFBRSxLQUFLeEIsS0FBTCxDQUFXRixhQWI1QjtBQWNFLE1BQUEsT0FBTyxFQUFFLEtBQUtFLEtBQUwsQ0FBV3lCLGFBZHRCO0FBZUUsTUFBQSxhQUFhLEVBQUUsS0FBS3pCLEtBQUwsQ0FBVzBCLGFBZjVCO0FBZ0JFLE1BQUEsb0JBQW9CLEVBQUUsS0FBSzFCLEtBQUwsQ0FBVzJCLG9CQWhCbkM7QUFpQkUsTUFBQSxVQUFVLEVBQUUsS0FBSzNCLEtBQUwsQ0FBVzRCLFVBakJ6QjtBQWtCRSxNQUFBLGNBQWMsRUFBRSxLQUFLNUIsS0FBTCxDQUFXNkIsY0FsQjdCO0FBbUJFLE1BQUEsU0FBUyxFQUFFLEtBQUs3QixLQUFMLENBQVc4QixTQW5CeEI7QUFxQkUsTUFBQSxXQUFXLEVBQUUsS0FBS0MsV0FyQnBCO0FBc0JFLE1BQUEsWUFBWSxFQUFFLEtBQUtDLFlBdEJyQjtBQXVCRSxNQUFBLGdCQUFnQixFQUFFLEtBQUtDLGdCQXZCekI7QUF3QkUsTUFBQSxnQkFBZ0IsRUFBRSxLQUFLQyxnQkF4QnpCO0FBeUJFLE1BQUEsa0JBQWtCLEVBQUUsS0FBS0Msa0JBekIzQjtBQTBCRSxNQUFBLHNCQUFzQixFQUFFLEtBQUtuQyxLQUFMLENBQVdvQyxzQkExQnJDO0FBMkJFLE1BQUEsY0FBYyxFQUFFLEtBQUtwQyxLQUFMLENBQVdxQyxjQTNCN0I7QUE0QkUsTUFBQSxrQkFBa0IsRUFBRSxLQUFLckMsS0FBTCxDQUFXc0Msa0JBNUJqQztBQTZCRSxNQUFBLG1CQUFtQixFQUFFLEtBQUt0QyxLQUFMLENBQVd1QyxtQkE3QmxDO0FBOEJFLE1BQUEsZ0JBQWdCLEVBQUUsS0FBS3ZDLEtBQUwsQ0FBV3dDLGdCQTlCL0I7QUErQkUsTUFBQSxzQkFBc0IsRUFBRSxLQUFLQyxzQkEvQi9CO0FBZ0NFLE1BQUEsZUFBZSxFQUFFLEtBQUt6QyxLQUFMLENBQVcwQyxlQWhDOUI7QUFpQ0UsTUFBQSxVQUFVLEVBQUUsS0FBSzFDLEtBQUwsQ0FBVzJDO0FBakN6QixNQURGO0FBcUNEOztBQTRCRDlCLEVBQUFBLGVBQWUsR0FBRztBQUNoQixXQUFPLEtBQUtiLEtBQUwsQ0FBVzBCLGFBQVgsQ0FBeUJrQixtQkFBekIsRUFBUDtBQUNEOztBQXBHOEQ7Ozs7Z0JBQTVDakQsbUIsZUFDQTtBQUNqQnVCLEVBQUFBLFNBQVMsRUFBRTJCLG1CQUFVQyxNQUFWLENBQWlCQyxVQURYO0FBRWpCNUIsRUFBQUEsU0FBUyxFQUFFNkIsOEJBQWtCRCxVQUZaO0FBR2pCcEMsRUFBQUEsVUFBVSxFQUFFc0MscUNBQXlCRixVQUhwQjtBQUlqQnJDLEVBQUFBLEtBQUssRUFBRXdDLHlCQUpVO0FBS2pCOUIsRUFBQUEsVUFBVSxFQUFFK0IsOEJBQWtCSixVQUxiO0FBT2pCMUIsRUFBQUEsZ0JBQWdCLEVBQUV3QixtQkFBVU8sTUFQWDtBQVFqQm5ELEVBQUFBLFVBQVUsRUFBRTRDLG1CQUFVQyxNQUFWLENBQWlCQyxVQVJaO0FBU2pCTSxFQUFBQSxVQUFVLEVBQUVDLDhCQUFrQlAsVUFUYjtBQVVqQnRCLEVBQUFBLGFBQWEsRUFBRTZCLDhCQUFrQlAsVUFWaEI7QUFXakJyQixFQUFBQSxhQUFhLEVBQUU2QiwyQkFBZVIsVUFYYjtBQVlqQnZCLEVBQUFBLFFBQVEsRUFBRWdDLDhCQUFrQlQsVUFaWDtBQWFqQmpELEVBQUFBLGFBQWEsRUFBRTJELDJCQUFlVixVQWJiO0FBY2pCbkIsRUFBQUEsVUFBVSxFQUFFaUIsbUJBQVVhLE1BQVYsQ0FBaUJYLFVBZFo7QUFlakJwQixFQUFBQSxvQkFBb0IsRUFBRWtCLG1CQUFVYyxJQUFWLENBQWVaLFVBZnBCO0FBZ0JqQmxCLEVBQUFBLGNBQWMsRUFBRWdCLG1CQUFVYyxJQUFWLENBQWVaLFVBaEJkO0FBaUJqQmpCLEVBQUFBLFNBQVMsRUFBRWUsbUJBQVVjLElBQVYsQ0FBZVosVUFqQlQ7QUFrQmpCekIsRUFBQUEsY0FBYyxFQUFFdUIsbUJBQVVPLE1BbEJUO0FBb0JqQmhCLEVBQUFBLHNCQUFzQixFQUFFUyxtQkFBVWUsSUFBVixDQUFlYixVQXBCdEI7QUFxQmpCVixFQUFBQSxjQUFjLEVBQUVRLG1CQUFVZSxJQUFWLENBQWViLFVBckJkO0FBc0JqQnhCLEVBQUFBLGFBQWEsRUFBRXNCLG1CQUFVYyxJQUFWLENBQWVaLFVBdEJiO0FBdUJqQlIsRUFBQUEsbUJBQW1CLEVBQUVNLG1CQUFVZSxJQUFWLENBQWViLFVBdkJuQjtBQXdCakJULEVBQUFBLGtCQUFrQixFQUFFTyxtQkFBVWUsSUFBVixDQUFlYixVQXhCbEI7QUF5QmpCUCxFQUFBQSxnQkFBZ0IsRUFBRUssbUJBQVVlLElBQVYsQ0FBZWIsVUF6QmhCO0FBMEJqQnRDLEVBQUFBLGlCQUFpQixFQUFFb0MsbUJBQVVlLElBQVYsQ0FBZWIsVUExQmpCO0FBMkJqQkwsRUFBQUEsZUFBZSxFQUFFRyxtQkFBVWUsSUFBVixDQUFlYixVQTNCZjtBQTRCakJKLEVBQUFBLFVBQVUsRUFBRUUsbUJBQVVlLElBQVYsQ0FBZWI7QUE1QlYsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQge1xuICBHaXRodWJMb2dpbk1vZGVsUHJvcFR5cGUsIFRva2VuUHJvcFR5cGUsIFJlZkhvbGRlclByb3BUeXBlLFxuICBSZW1vdGVTZXRQcm9wVHlwZSwgUmVtb3RlUHJvcFR5cGUsIEJyYW5jaFNldFByb3BUeXBlLCBCcmFuY2hQcm9wVHlwZSxcbiAgUmVmcmVzaGVyUHJvcFR5cGUsXG59IGZyb20gJy4uL3Byb3AtdHlwZXMnO1xuaW1wb3J0IEdpdEh1YlRhYlZpZXcgZnJvbSAnLi4vdmlld3MvZ2l0aHViLXRhYi12aWV3JztcbmltcG9ydCB7aW5jcmVtZW50Q291bnRlcn0gZnJvbSAnLi4vcmVwb3J0ZXItcHJveHknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHaXRIdWJUYWJDb250cm9sbGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB3b3Jrc3BhY2U6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByZWZyZXNoZXI6IFJlZnJlc2hlclByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgbG9naW5Nb2RlbDogR2l0aHViTG9naW5Nb2RlbFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgdG9rZW46IFRva2VuUHJvcFR5cGUsXG4gICAgcm9vdEhvbGRlcjogUmVmSG9sZGVyUHJvcFR5cGUuaXNSZXF1aXJlZCxcblxuICAgIHdvcmtpbmdEaXJlY3Rvcnk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcmVwb3NpdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGFsbFJlbW90ZXM6IFJlbW90ZVNldFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgZ2l0aHViUmVtb3RlczogUmVtb3RlU2V0UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBjdXJyZW50UmVtb3RlOiBSZW1vdGVQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIGJyYW5jaGVzOiBCcmFuY2hTZXRQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIGN1cnJlbnRCcmFuY2g6IEJyYW5jaFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgYWhlYWRDb3VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIG1hbnlSZW1vdGVzQXZhaWxhYmxlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIHB1c2hJblByb2dyZXNzOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlzTG9hZGluZzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBjdXJyZW50V29ya0RpcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgIGNoYW5nZVdvcmtpbmdEaXJlY3Rvcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0Q29udGV4dExvY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29udGV4dExvY2tlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBvbkRpZENoYW5nZVdvcmtEaXJzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldEN1cnJlbnRXb3JrRGlyczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuQ3JlYXRlRGlhbG9nOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5QdWJsaXNoRGlhbG9nOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5DbG9uZURpYWxvZzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuR2l0VGFiOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8R2l0SHViVGFiVmlld1xuICAgICAgICAvLyBDb25uZWN0aW9uXG4gICAgICAgIGVuZHBvaW50PXt0aGlzLmN1cnJlbnRFbmRwb2ludCgpfVxuICAgICAgICB0b2tlbj17dGhpcy5wcm9wcy50b2tlbn1cblxuICAgICAgICB3b3Jrc3BhY2U9e3RoaXMucHJvcHMud29ya3NwYWNlfVxuICAgICAgICByZWZyZXNoZXI9e3RoaXMucHJvcHMucmVmcmVzaGVyfVxuICAgICAgICByb290SG9sZGVyPXt0aGlzLnByb3BzLnJvb3RIb2xkZXJ9XG5cbiAgICAgICAgd29ya2luZ0RpcmVjdG9yeT17dGhpcy5wcm9wcy53b3JraW5nRGlyZWN0b3J5IHx8IHRoaXMucHJvcHMuY3VycmVudFdvcmtEaXJ9XG4gICAgICAgIGNvbnRleHRMb2NrZWQ9e3RoaXMucHJvcHMuY29udGV4dExvY2tlZH1cbiAgICAgICAgcmVwb3NpdG9yeT17dGhpcy5wcm9wcy5yZXBvc2l0b3J5fVxuICAgICAgICBicmFuY2hlcz17dGhpcy5wcm9wcy5icmFuY2hlc31cbiAgICAgICAgY3VycmVudEJyYW5jaD17dGhpcy5wcm9wcy5jdXJyZW50QnJhbmNofVxuICAgICAgICByZW1vdGVzPXt0aGlzLnByb3BzLmdpdGh1YlJlbW90ZXN9XG4gICAgICAgIGN1cnJlbnRSZW1vdGU9e3RoaXMucHJvcHMuY3VycmVudFJlbW90ZX1cbiAgICAgICAgbWFueVJlbW90ZXNBdmFpbGFibGU9e3RoaXMucHJvcHMubWFueVJlbW90ZXNBdmFpbGFibGV9XG4gICAgICAgIGFoZWFkQ291bnQ9e3RoaXMucHJvcHMuYWhlYWRDb3VudH1cbiAgICAgICAgcHVzaEluUHJvZ3Jlc3M9e3RoaXMucHJvcHMucHVzaEluUHJvZ3Jlc3N9XG4gICAgICAgIGlzTG9hZGluZz17dGhpcy5wcm9wcy5pc0xvYWRpbmd9XG5cbiAgICAgICAgaGFuZGxlTG9naW49e3RoaXMuaGFuZGxlTG9naW59XG4gICAgICAgIGhhbmRsZUxvZ291dD17dGhpcy5oYW5kbGVMb2dvdXR9XG4gICAgICAgIGhhbmRsZVRva2VuUmV0cnk9e3RoaXMuaGFuZGxlVG9rZW5SZXRyeX1cbiAgICAgICAgaGFuZGxlUHVzaEJyYW5jaD17dGhpcy5oYW5kbGVQdXNoQnJhbmNofVxuICAgICAgICBoYW5kbGVSZW1vdGVTZWxlY3Q9e3RoaXMuaGFuZGxlUmVtb3RlU2VsZWN0fVxuICAgICAgICBjaGFuZ2VXb3JraW5nRGlyZWN0b3J5PXt0aGlzLnByb3BzLmNoYW5nZVdvcmtpbmdEaXJlY3Rvcnl9XG4gICAgICAgIHNldENvbnRleHRMb2NrPXt0aGlzLnByb3BzLnNldENvbnRleHRMb2NrfVxuICAgICAgICBnZXRDdXJyZW50V29ya0RpcnM9e3RoaXMucHJvcHMuZ2V0Q3VycmVudFdvcmtEaXJzfVxuICAgICAgICBvbkRpZENoYW5nZVdvcmtEaXJzPXt0aGlzLnByb3BzLm9uRGlkQ2hhbmdlV29ya0RpcnN9XG4gICAgICAgIG9wZW5DcmVhdGVEaWFsb2c9e3RoaXMucHJvcHMub3BlbkNyZWF0ZURpYWxvZ31cbiAgICAgICAgb3BlbkJvdW5kUHVibGlzaERpYWxvZz17dGhpcy5vcGVuQm91bmRQdWJsaXNoRGlhbG9nfVxuICAgICAgICBvcGVuQ2xvbmVEaWFsb2c9e3RoaXMucHJvcHMub3BlbkNsb25lRGlhbG9nfVxuICAgICAgICBvcGVuR2l0VGFiPXt0aGlzLnByb3BzLm9wZW5HaXRUYWJ9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICBoYW5kbGVQdXNoQnJhbmNoID0gKGN1cnJlbnRCcmFuY2gsIHRhcmdldFJlbW90ZSkgPT4ge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnJlcG9zaXRvcnkucHVzaChjdXJyZW50QnJhbmNoLmdldE5hbWUoKSwge1xuICAgICAgcmVtb3RlOiB0YXJnZXRSZW1vdGUsXG4gICAgICBzZXRVcHN0cmVhbTogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVJlbW90ZVNlbGVjdCA9IChlLCByZW1vdGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMucmVwb3NpdG9yeS5zZXRDb25maWcoJ2F0b21HaXRodWIuY3VycmVudFJlbW90ZScsIHJlbW90ZS5nZXROYW1lKCkpO1xuICB9XG5cbiAgb3BlbkJvdW5kUHVibGlzaERpYWxvZyA9ICgpID0+IHRoaXMucHJvcHMub3BlblB1Ymxpc2hEaWFsb2codGhpcy5wcm9wcy5yZXBvc2l0b3J5KTtcblxuICBoYW5kbGVMb2dpbiA9IHRva2VuID0+IHtcbiAgICBpbmNyZW1lbnRDb3VudGVyKCdnaXRodWItbG9naW4nKTtcbiAgICB0aGlzLnByb3BzLmxvZ2luTW9kZWwuc2V0VG9rZW4odGhpcy5jdXJyZW50RW5kcG9pbnQoKS5nZXRMb2dpbkFjY291bnQoKSwgdG9rZW4pO1xuICB9XG5cbiAgaGFuZGxlTG9nb3V0ID0gKCkgPT4ge1xuICAgIGluY3JlbWVudENvdW50ZXIoJ2dpdGh1Yi1sb2dvdXQnKTtcbiAgICB0aGlzLnByb3BzLmxvZ2luTW9kZWwucmVtb3ZlVG9rZW4odGhpcy5jdXJyZW50RW5kcG9pbnQoKS5nZXRMb2dpbkFjY291bnQoKSk7XG4gIH1cblxuICBoYW5kbGVUb2tlblJldHJ5ID0gKCkgPT4gdGhpcy5wcm9wcy5sb2dpbk1vZGVsLmRpZFVwZGF0ZSgpO1xuXG4gIGN1cnJlbnRFbmRwb2ludCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jdXJyZW50UmVtb3RlLmdldEVuZHBvaW50T3JEb3Rjb20oKTtcbiAgfVxufVxuIl19